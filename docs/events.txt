Naming conventions:
- if event has name "xxxxx", linked actions should be "xxxxx-set" and "xxxxx-get".
- standard value parameter must be "value" (used in events and actions)
Common parameters:
- port: if a device control several sub-devices (for example, a sonoff dual controls 2 separate relays) they are detected as "ports"
- channel: if a device has different method to call the same device or sub-device(port), it uses different channels. For example, for a button, you could have "single-press" and "longpress" as 2 different channels
- *:unit: identifies the unit used by that parameter. For example. power:1, power:unit: "W". For "value" you can simply use "unit". Ex: temperature: { value: 20, unit: "C" }
- *_reported: if the event manipulates the value reported by the device in some way, it can set the original value, as reported by the device, in this parameter
- temporary: event should be considered temporary, after a while the event state will revert back to previous state. Events with temporary set to a number != 0 or to a boolean != False should NOT be cached, and event_get calls should return previous state. Used, for example, with push buttons
- source: sometimes it could be useful to declare data source (the module that generated the data, or the website, or the generic "data source")
- x_*: a property useful for this entry, but not associated to the standard syntax

Events/actions:
- clock: {value: timestamp}: message contains information about current device time

- connected: { value: boolean(1|0), [temporary: true], ['ip_address': None], ['mac_address': '0A:0B:0C:0D:0E:0F'], ['was_connected': true|false], ['method': '...'], ['prev_ip_address': '...'] }: usually connected to LWT @see modules/health
  if the entry is disconnected, connected = { value: 0 } is sent
  if the connection is temporary (button), connected = { value: 1, temporary: true } is sent
  if connection is based on net sniffing, ip_address is ALWAY set with ipv4 address, or None if no address is detected. During disconnection (value = 0), ip_address is always NONE (prev_ip_address could contain the ip address before the disconnection)
- alive: { value: boolean(1|0) }: entry is connected and sending messages @see modules/health, if 0 entry is not connected or not sending any message for a long time @see modules/health
- failure: { value: boolean, [reason: ""] }

- output: { value: 'X', [intensity: X], [timer_to: timestamp] } // NOTA: value in genere è un "int" (0,1), ma potrebbe anche essere una stringa per i multi-value (per ora solo ipotizzati)
- ACTION: output-set: { value: 'X', [timer_to: seconds|timestamp] } 
- ACTION: output-get: {}
- ACTION: output-invert: { [value: 'X'], [timer_to: seconds|timestamp] } // NOTA: value è inutile per i toggle (0,1), ma potrebbe invece essere utile per i multi-value (per invertire solo un certo valore)
- input: { value: int, [channel: singlepush|doublepush|longpush] } // WARN tasmota channels: ['SINGLE', 'DOUBLE', 'TRIPLE', 'QUAD', 'PENTA', 'HOLD']
- ACTION: input-get: {}

- temperature: { value: float, [unit: 'C'] }
- humidity: { value: float }
- pressure: { value: float, [unit: 'hPa'] }
- energy: {"power": int, "power_reactive": int, "power_apparent": int, "power_factor": float, "power:unit": "W", "energy_today": float, "energy_yesterday": float, "energy_total": float, "total_starttime": int, "total_duration": int, "energy:unit": "kWh", "voltage": int, "voltage:unit": "V", "current": float, "current:unit": "A"  }
- netspeed: {"download": int, "download:unit": "bps", "upload": int, "upload:unit": "bps", "ping": float, "ping:unit": "ms", "error": string}
- bandwidth: come sopra ma per la rete usata
- water-leak: { value: [int] } # Inserito anche input con channel = "water-leak"
- vibration: { value: [int], temporary: true } # in genere quando value = 1 => temporary = true (se value = 0 invece si intende stato stabile senza temporary)
- tamper: { value: [int] }
- occupancy: { value: [int] }

- battery: { value: int } # value 0..100
- autonomy: { value: seconds }
- load: { value: int } # %

- presence-in: {"who": string, "before_someone_inside": bool, "region": "home" }
- presence-out: {"who": string, "after_someone_inside": bool, "region": "home" }
//NO? Per ora non l'ho codificato presence-status: { areaname: who-list }

- 'location': "js:({'latitude': payload['lat'], 'longitude': payload['lon'], 'altitude': payload['alt'], 'radius': payload['acc'], 'radius:unit': 'm', 'regions': payload['inregions'], 'source': 'owntracks'})",

TODO:
- stats (@see sonoff_tasmota module)


:def:
- [0, 1] | ['one', 'two', ...]
- 'int' (+ ':def:limits': [1, 100])
- 'float'



*:unit:
- power: W, kW, 
- energy: Wh, kWh, Wmin
- current: A
- voltage: V
- temperature: °C, °F
---
- pressure: hPa
- humidity: %

