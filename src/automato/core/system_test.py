# require python3
# -*- coding: utf-8 -*-

import time

from automato.core import test
from automato.core import system

test_history = False

def test_init():
  config = {
    "entries": [
      {
        "item": "entry_a",
        "on": {
          "entry_b.test_event": {
            "handler": on_test_on_event1,
          },
          "entry_b.test_event(params['port'] == '1')": {
            "handler": on_test_on_event2,
          },
          "entry_b.test_do": {
            "do": "entry_b.test_do_action(js:params['value'] = params['value'] + 1)",
          },
          ".test_event(js:params['port'] == 'entry_a')": {
            "handler": on_test_on_event_implicit,
          }
        },
        "publish": {
          "@/event": {
            "type": None,
            "events": {
              "test_event": "js:({ port: 'entry_a' })"
            }
          }
        },
        "events_passthrough": "entry_b.test_action_response",
      },
      {
        "caption": "Entry B",
        "device": "entry_b",
        "entry_topic": "entry_b",
        "events_listen": [".test_action_call"],
        "publish": {
          "@/pub1": {
            "type": "int",
            "notify": "{caption} published pub1={payload}",
            "events": {
              "test_event": "js:({ port: payload + '1' })",
            }
          },
          "@/pub2": {
            "type": "int",
            "payload_transform": "jsf: payload['x'] = payload['x'] + 'transformed'; return payload",
            "notify": "{caption} published pub2={payload[x]}",
            "events": {
              "test_event": "js:({ port: payload['x'] + '1' })",
            }
          },
          "subs/entry_b/response": {
            "description": "test response su subs/entry_b",
            "handler": publish,
            "events": {
              "test_action_response": "js:({})",
            }
          },
          "subs/entry_b/TEST0X": {
            "type": "string",
            "events": {
              "test_action_call": "js:({value: payload})",
            }
          },
          "subs/entry_b/test_do": {
            "type": "string",
            "events": {
              "test_do": "js:({value: parseInt(payload)})",
            }
          }
        },
        "subscribe": {
          "subs/entry_b": {
            "type": "string",
            "handler": on_subscribed_message,
            "publish": [ "subs/entry_b/response" ],
            "actions": {
              "test_action": "js:'test' + params['value'] + params['val2']",
              "test_action2": { 'init': 'js:params["val2"] = "0"', 'topic': 'js:"subs/entry_b/TEST" + params ["val2"]', 'payload': 'js:"test" + params["value"] + params["val2"]' }, # This is calling "subs/entry_b/0X", despite it's in "subs/entry_b"
            }
          },
          "@/test_do_result": {
            "type": "string",
            "actions": {
              "test_do_action": "js:params['value']",
            }
          },
          "/^subs/entry_b/TEST(.*)/": {
            "type": "string",
            "handler": on_subscribed_message2,
            "publish": [ "subs/entry_b/response" ],
          }
        },
        "on": {
          # Generated by entry_a via events_passthrough
          "entry_a.test_action_response": {
            "handler": on_test_on_events_passthrough,
          }
        }
      },
      
      ####################################################################################
      ### TEST event_get cache e event_keys
      
      {
        "item": "entry_c",
        "events_listen": [ ".data" ],
        "publish": {
          "./event": { "type": "object", "events": { "data": "js:(payload)" } }
        },
        "subscribe": {
          "./action": { "type": "object", "actions": { "data-set": "js:params" } }
        }
      },
      {
        "item": "entry_d",
        "events_listen": [ ".data" ],
        "event_keys": [ "myport" ],
        "publish": {
          "./event": { "type": "object", "events": { "data": "js:(payload)" } }
        },
        "subscribe": {
          "./action": { "type": "object", "actions": { "data-set": "js:params" } }
        }
      },

      ####################################################################################
      ### TEST multiple events / event:init / event groups
      {
        "item": "entry_e",
        "events_listen": [ ".data" ],
        "publish": {
          "./event": { "type": "object", "events": { 
            "data": ["js:(payload)","js:({'port': '1', 'value': 1})"],
            "data:init": [{"all": 1}, { "port": "1", "unit": "A"}, { "port": "2", "unit": "B" }],
          } },
          "./group": { "type": "object", "events": { 
            "egroup": ["js:(payload)"],
          } }
        },
        "events": {
          "egroup:group": 60
        },
        "on": {
          ".egroup": {
            "handler": on_test_on_entry_e_group,
          },
        }
      },
    ]
  }
  if test_history:
    config["entries"].append({ "module": "history" })
  test.add_node_config(config)

def test_run(entries):
  if test_history:
    entries['history@TEST'].module.run(entries['history@TEST'])

  if (True):
    # Test "events", "on" declarations and "payload_transform"
    test.assertPublish('s1', 'entry_b/pub1', 'test', assertChild = ['entry_a_on_test_event1'], assertNotChild = ['entry_a_on_test_event2', 'entry_a_on_test_event_implicit'], assertEvents = {'test_event': {'port': 'test1'}}, assertNotification = ['info', 'Entry B published pub1=test'])
    test.assertPublish('s2', 'entry_b/pub1', '', assertChild = ['entry_a_on_test_event1', 'entry_a_on_test_event2'], assertEvents = {'test_event': {'port': '1'}}, assertNotification = ['info', 'Entry B published pub1='])
    test.assertPublish('s3', 'entry_b/pub2', '{"x": 1}', assertEvents = {'test_event': {'port': '1transformed1'}}, assertNotification = ['info', 'Entry B published pub2=1transformed'])
    test.assertPublish('s4', 'entry_b/pub3', 'test', assertNotChild = ['entry_a_on_test_event1', 'entry_a_on_test_event2', 'entry_a_on_test_event_implicit'], assertEvents = {})
    
    # Test .on called programmatically on a specific entry
    system.entry_get('entry_a').on('test_event', on_test_on_event3, 'js:params["port"] == "entry_a"')
    entries['entry_a@TEST'].on('test_event', on_test_on_event2, 'js:params["port"] == "fake"')
    test.assertPublish('s5', 'item/entry_a/event', '', assertChild = ['entry_a_prog_on', 'entry_a_on_test_event_implicit'], assertNotChild = ['entry_a_on_test_event2'], assertEvents = {'test_event': {"port": "entry_a"}})
    
    #system.entry_reload('entry_a@TEST');
    
    # Test "actions" and "handler" declarations
    test.assertAction('s6', 'entry_b', 'test_action', { 'value': '1' }, init = 'js:params["val2"] = "0"', assertSubscribe = {'subs/entry_b': 'test10', 'subs/entry_b/response': 'ok'}, assertChild = ['entry_b_on_subscribed_message', 'entry_b_publish', 'entry_b_on_events_passthrough'], assertEventsTopic = 'subs/entry_b/response', assertEvents = {'test_action_response': {}})
    test.assertAction('s7', 'entry_b', 'test_action2', { 'value': '1' }, init = 'js:params["val2"] = params["val2"] + "X"', assertSubscribe = {'subs/entry_b/TEST0X': 'test10X', 'subs/entry_b/response': 'ok'}, assertChild = ['entry_b_on_subscribed_message2', 'entry_b_publish'], assertEventsTopic = 'subs/entry_b/response', assertEvents = {'test_action_response': {}})
    
    # Test "on"."do"
    test.assertPublish('s8', 'subs/entry_b/test_do', 2, assertSubscribe = { 'entry_b/test_do_result': '3' })
    
    # Test changed_params
    test.assertPublish('s9', 'entry_b/pub1', '', assertEventsData = True, assertEvents = [{'name': 'test_event', 'params': {'port': '1'}, 'changed_params': {}, 'keys': {'port': '1'}, 'time': ('*',)}])
    test.assertPublish('s10', 'entry_b/pub1', '1', assertEventsData = True, assertEvents = [{'name': 'test_event', 'params': {'port': '11'}, 'changed_params': {}, 'keys': {'port': '11'}, 'time': ('*',)}])
  
    if test_history:
      entries['history@TEST'].module.run(entries['history@TEST'])

  ####################################################################################
  ### TEST event_get cache e event_keys
  
  if (True):
    test.assertPublish('e1', 'item/entry_c/event', { 'port': '1', 'value': 5 }, assertEvents = {'data': { 'port': '1', 'value': 5 } })
    system.time_offset(10)
    test.assertx('e2', assertEq=[
      (system.event_get("entry_c.data"), { 'port': '1', 'value': 5 }),
      (system.event_get("entry_c.data", timeout = 5), None),
      (system.event_get("entry_c.data(js:params['port'] == '1')"), { 'port': '1', 'value': 5 }),
      (system.event_get("entry_c.data(js:params['port'] == '1')", timeout = 5), None),
      (system.event_get("entry_c.data(js:params['port'] == '2')"), None),
    ])
    test.assertPublish('e3', 'item/entry_c/event', { 'port': '2', 'value': 6 }, assertEvents = {'data': { 'port': '2', 'value': 6 } })
    system.time_offset(10)
    test.assertx('e4', assertEq=[
      (system.event_get("entry_c.data"), { 'port': '2', 'value': 6 }),
      (system.event_get("entry_c.data", timeout = 5), None),
      (system.event_get("entry_c.data(js:params['port'] == '1')"), { 'port': '1', 'value': 5 }),
      (system.event_get("entry_c.data(js:params['port'] == '1')", timeout = 5), None),
      (system.event_get("entry_c.data(js:params['port'] == '2')"), { 'port': '2', 'value': 6 }),
      (system.event_get("entry_c.data(js:params['port'] == '2')", timeout = 5), None),
    ])
    system.do_action("entry_c.data-set(js:params['port'] = '2')", {'value': 7}) # invalidates port=2 cache
    test.assertx('e5', assertEq=[
      (system.event_get("entry_c.data"), { 'port': '1', 'value': 5 }),
      (system.event_get("entry_c.data", timeout = 5), None),
      (system.event_get("entry_c.data(js:params['port'] == '1')"), { 'port': '1', 'value': 5 }),
      (system.event_get("entry_c.data(js:params['port'] == '1')", timeout = 5), None),
      (system.event_get("entry_c.data(js:params['port'] == '2')"), None),
      (system.event_get("entry_c.data(js:params['port'] == '2')", timeout = 5), None),
    ])
    test.assertPublish('e6', 'item/entry_c/event', { 'port': '2', 'value': 7 }, assertEvents = {'data': { 'port': '2', 'value': 7 } })
    test.assertPublish('e7', 'item/entry_c/event', { 'port': '1', 'value': 8 }, assertEvents = {'data': { 'port': '1', 'value': 8 } })
    system.do_action("entry_c.data-set(js:params['port'] = '2')", {'value': 8 }, if_event_not_match = "entry_c.data(js:params['port'] == 1)") # NOT invalidates cache, action is NOT done (event matched)
    test.assertx('e7', assertEq=[
      (system.event_get("entry_c.data"), { 'port': '1', 'value': 8 }),
      (system.event_get("entry_c.data", timeout = 5), { 'port': '1', 'value': 8 }),
      (system.event_get("entry_c.data(js:params['port'] == '1')"), { 'port': '1', 'value': 8 }),
      (system.event_get("entry_c.data(js:params['port'] == '1')", timeout = 5), { 'port': '1', 'value': 8 }),
      (system.event_get("entry_c.data(js:params['port'] == '2')"), { 'port': '2', 'value': 7 }),
      (system.event_get("entry_c.data(js:params['port'] == '2')", timeout = 5), { 'port': '2', 'value': 7 }),
    ])
    system.do_action("entry_c.data-set(js:params['port'] = '2')", {'value': 5 }, if_event_not_match = "entry_c.data(js:params['port'] == 1)") # invalidate port=1 cache
    test.assertx('e8', assertEq=[
      (system.event_get("entry_c.data"), { 'port': '2', 'value': 7 }),
      (system.event_get("entry_c.data(js:params['port'] == '1')"), None),
      (system.event_get("entry_c.data(js:params['port'] == '2')"), { 'port': '2', 'value': 7 }),
    ])
    # test event_keys definition (different cache for 'myport' param and NOT for 'port')
    # also test for cumulative data of events and temporary
    test.assertPublish('e9', 'item/entry_d/event', { 'myport': '1', 'port': 5, 'cumulated': 9 }, assertEvents = {'data': { 'myport': '1', 'port': 5, 'cumulated': 9 } })
    test.assertx('e10', assertEq=[
      (system.event_get("entry_d.data"), { 'myport': '1', 'port': 5, 'cumulated': 9 }),
      (system.event_get("entry_d.data(js:params['myport'] == '1')"), { 'myport': '1', 'port': 5, 'cumulated': 9 }),
      (system.event_get("entry_d.data(js:params['myport'] == '2')"), None),
      (system.event_get("entry_d.data(js:params['port'] == 5)"), { 'myport': '1', 'port': 5, 'cumulated': 9 }),
    ])
    test.assertPublish('e11', 'item/entry_d/event', { 'myport': '2', 'port': 6 }, assertEvents = {'data': { 'myport': '2', 'port': 6 } })
    test.assertPublish('e12', 'item/entry_d/event', { 'myport': '1', 'port': 6 }, assertEvents = {'data': { 'myport': '1', 'port': 6, 'cumulated': 9 } })
    test.assertx('e13', assertEq=[
      (system.event_get("entry_d.data"), { 'myport': '1', 'port': 6, 'cumulated': 9 }),
      (system.event_get("entry_d.data(js:params['myport'] == '1')"), { 'myport': '1', 'port': 6, 'cumulated': 9 }),
      (system.event_get("entry_d.data(js:params['myport'] == '1')", temporary = True), None),
      (system.event_get("entry_d.data(js:params['myport'] == '2')"), { 'myport': '2', 'port': 6 }),
      (system.event_get("entry_d.data(js:params['port'] == 5)"), None),
    ])
    test.assertPublish('e14', 'item/entry_d/event', { 'myport': '1', 'port': 7, 'temporary': True }, assertEvents = {'data': { 'myport': '1', 'port': 7, 'cumulated': 9, 'temporary': True } })
    test.assertx('e15', assertEq=[
      (system.event_get("entry_d.data"), { 'myport': '1', 'port': 6, 'cumulated': 9 }),
      (system.event_get("entry_d.data(js:params['myport'] == '1')"), { 'myport': '1', 'port': 6, 'cumulated': 9 }),
      (system.event_get("entry_d.data(js:params['myport'] == '1')", temporary = True), { 'myport': '1', 'port': 7, 'cumulated': 9, 'temporary': True }),
      (system.event_get("entry_d.data(js:params['myport'] == '2')"), { 'myport': '2', 'port': 6 }),
    ])
    if test_history:
      entries['history@TEST'].module.run(entries['history@TEST'])
    
  
  ####################################################################################
  ### TEST multiple events / event:init / event groups
  
  if (True):
    # this one publish an event {'port': '2', 'x': 'y'} and an event {'port': 1, 'value': 1}
    test.assertPublish('e16', 'item/entry_e/event', { 'x': 'y', 'port': '2' }, assertEventsData = True, 
      assertEvents = [
        {'name': 'data', 'params': {'port': '2', 'x': 'y', 'unit': 'B', 'all': 1}, 'changed_params': {'x': 'y'}, 'keys': {'port': '2'}, 'time': ()},
        {'name': 'data', 'params': {'port': '1', 'value': 1, 'unit': 'A', 'all': 1}, 'changed_params': {'value': 1}, 'keys': {'port': '1'}, 'time': ()}
      ])
    # this one publish an event {'z': 3} [with no keys => impact other events with keys] and an event {'port': 1, 'value': 1}
    test.assertPublish('e17', 'item/entry_e/event', { 'z': 3 }, assertEventsData = True, 
      assertEvents = [
        {'name': 'data', 'params': {'all': 1, 'z': 3}, 'changed_params': {'z': 3}, 'keys': {}, 'time': ()},
        {'name': 'data', 'params': {'port': '1', 'value': 1, 'unit': 'A', 'all': 1, 'z': 3}, 'changed_params': {}, 'keys': {'port': '1'}, 'time': ()}
      ])
    # this one publish an event {'all': 2 } [with no keys => impact other events with keys] and an event {'port': 1, 'value': 1}
    test.assertPublish('e18', 'item/entry_e/event', { 'all': 2 }, assertEventsData = True, 
      assertEvents = [
        {'name': 'data', 'params': {'all': 2, 'z': 3}, 'changed_params': {'all': 2}, 'keys': {}, 'time': ()},
        {'name': 'data', 'params': {'port': '1', 'value': 1, 'unit': 'A', 'all': 2, 'z': 3}, 'changed_params': {}, 'keys': {'port': '1'}, 'time': ()}
      ])
    if test_history:
      entries['history@TEST'].module.run(entries['history@TEST'])

    test.assertPublish('e20', 'item/entry_e/group', { 'v1': 1 }, assertNotChild = ['entry_e.on_group_event'], timeoutms = 1000, wait = False)
    test.assertPublish('e21', 'item/entry_e/group', { 'v2': 2 }, assertNotChild = ['entry_e.on_group_event'], timeoutms = 1000, wait = False)
    test.waitRunning()
    system.time_offset(60)
    test.assertx('e22', assertChild = ['entry_e.on_group_event'])
    
    
  ####################################################################################
  ### TEST topic_matches
  
  if (True):
    test.assertx('topic_matches', assertEq=[
      (system.topic_matches('a/b', 'a/b', ''), { 'matched': True, 'topic_matches': [True], 'use_payload': False, 'used': ('*',) }),
      (system.topic_matches('a/+/c', 'a/b/c', ''), { 'matched': True, 'topic_matches': [True], 'use_payload': False, 'used': ('*',) }),
      (system.topic_matches('a/#', 'a/b/c', ''), { 'matched': True, 'topic_matches': [True], 'use_payload': False, 'used': ('*',) }),
      (system.topic_matches('a/#', 'b/c', ''), { 'matched': False, 'topic_matches': [], 'use_payload': None, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/', 'a/b/c', ''), { 'matched': True, 'topic_matches': ['a/b/c', '/b/c'], 'use_payload': False, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/[1/|2/]', 'a/b/c', ''), { 'matched': False, 'topic_matches': ['a/b/c', '/b/c'], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/[1|2/]', 'a/b/c', '2/'), { 'matched': True, 'topic_matches': ['a/b/c', '/b/c'], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('a/#[/^z.*z$/]', 'a/b/c', 'x'), { 'matched': False, 'topic_matches': [True], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('a/#[/^z.*z$/]', 'a/b/c', 'zxz'), { 'matched': True, 'topic_matches': [True], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('a/+[js: payload=="x"]', 'a/b', ''), { 'matched': False, 'topic_matches': [True], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('a/+[js: payload=="x"]', 'a/b', 'x'), { 'matched': True, 'topic_matches': [True], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/[js: matches[1]=="/b/c"]', 'a/b/c', ''), { 'matched': True, 'topic_matches': ['a/b/c', '/b/c'], 'use_payload': False, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/[js: matches[1]=="/b/c"]', 'a/d/e', ''), { 'matched': False, 'topic_matches': ['a/d/e', '/d/e'], 'use_payload': False, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/[js: matches[1]=="/b/c" && payload=="x"]', 'a/b/c', ''), { 'matched': False, 'topic_matches': ['a/b/c', '/b/c'], 'use_payload': True, 'used': ('*',) }),
      (system.topic_matches('/^a(.*)$/[js: matches[1]=="/b/c" && payload=="x"]', 'a/b/c', 'x'), { 'matched': True, 'topic_matches': ['a/b/c', '/b/c'], 'use_payload': True, 'used': ('*',) }),
    ])
    if test_history:
      entries['history@TEST'].module.run(entries['history@TEST'])
  
  # TODO Test invokeHandlers
  
def on_test_on_event1(entry, eventname, eventdata, caller, published_message):
  if test.isRunning('s1'):
    test.assertChild('entry_a_on_test_event1', assertEq = [(entry.id, "entry_b@TEST"), (eventname, "test_event"), (eventdata['params'], {"port": "test1"})])
  elif test.isRunning('s2'):
    test.assertChild('entry_a_on_test_event1', assertEq = [(entry.id, "entry_b@TEST"), (eventname, "test_event"), (eventdata['params'], {"port": "1"})])
    # Important test: a listener can manipulate input data, but it's intended as local manipulation only, changed data MUST not be propagated to other listeners. If below change is propagated, listener "on_test_on_event2" won't be called and test fails
    eventdata['params']['port'] = "2"

def on_test_on_event2(entry, eventname, eventdata, caller, published_message):
  test.assertChild('entry_a_on_test_event2', assertEq = [(entry.id, "entry_b@TEST"), (eventname, "test_event"), (eventdata['params'], {"port": "1"})])

def on_test_on_event3(entry, eventname, eventdata, caller, published_message):
  test.assertChild('entry_a_prog_on', assertEq = [(entry.id, "entry_a@TEST"), (eventname, "test_event"), (eventdata['params'], {"port": "entry_a"})])

def on_test_on_event_implicit(entry, eventname, eventdata, caller, published_message):
  test.assertChild('entry_a_on_test_event_implicit', assertEq = [(entry.id, "entry_a@TEST"), (eventname, "test_event"), (eventdata['params'], {"port": "entry_a"})])
  
def on_test_on_events_passthrough(entry, eventname, eventdata, caller, published_message):
  test.assertChild('entry_b_on_events_passthrough', assertEq = [(entry.id, "entry_a@TEST"), (eventname, "test_action_response"), (eventdata['params'], {})])

def on_subscribed_message(entry, subscribed_message):
  firstpm = subscribed_message.message.firstPublishedMessage()
  source_entry = firstpm.entry if firstpm else None
  listened_events = subscribed_message.message.events()
  test.assertChild('entry_b_on_subscribed_message', assertEq = [(entry.id, "entry_b@TEST"), (subscribed_message.payload, "test10"), (subscribed_message.matches, []), (source_entry, None), (listened_events, [])])

def on_subscribed_message2(entry, subscribed_message):
  firstpm = subscribed_message.message.firstPublishedMessage()
  source_entry = firstpm.entry if firstpm else None
  listened_events = subscribed_message.message.events()
  eventsp = {k['name']: k['params'] for k in listened_events}
  test.assertChild('entry_b_on_subscribed_message2', assertEq = [(entry.id, "entry_b@TEST"), (subscribed_message.payload, "test10X"), (subscribed_message.matches, ['subs/entry_b/TEST0X', '0X']), (source_entry.id if source_entry else "-", "entry_b@TEST"), (eventsp, {'test_action_call': {'value': 'test10X'}})])

def publish(entry, topic_rule, topic_definition):
  entry.publish('', 'ok')
  test.assertChild('entry_b_publish', assertEq = [(entry.id, "entry_b@TEST"), (topic_rule, "subs/entry_b/response"), (topic_definition["description"], "test response su subs/entry_b")])

def on_test_on_entry_e_group(entry, eventname, eventdata, caller, published_message):
  test.assertChild('entry_e.on_group_event', assertEq = [(eventdata['params'], {'v1': 1, 'v2': 2}), (caller, "group"), (published_message, None)])
